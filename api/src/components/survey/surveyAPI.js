import { Path } from 'path-parser';
import { URL } from 'url';
import sgMail from '@sendgrid/mail';
import Survey from './surveyModel';
import surveyRouter from '../../libs/router/enrichRouter';
import requireLogin from '../../libs/login/requireLogin';
import { sendGridAPIKeys } from '../../config/keys';
import requireCredits from '../../libs/credit/requireCredits';
import surveyTemplate from '../../libs/email/surveyTemplate';

surveyRouter.get('/api/surveys', requireLogin, async (req, res) => {
  const surveys = await Survey.find({
    _user: req.user.id
  }).select({
    recipients: false
  });
  res.send(surveys);
});

surveyRouter.get('/api/surveys/:surveyId/:choice', (req, res) => {
  res.send('Thanks for voting');
});

surveyRouter.post('/api/surveys/webhooks', (req, res) => {
  const uniqBy = (arr, predicate) => {
    const cb = typeof predicate === 'function' ? predicate : o => o[predicate];
    return [
      ...arr
        .reduce((map, item) => {
          const key = cb(item);
          map.has(key) || map.set(key, item);
          return map;
        }, new Map())
        .values()
    ];
  };
  const p = new Path('/api/surveys/:surveyId/:choice');
  const uniqueEvents = uniqBy(
    req.body
      .map(({ email, url }) => {
        const match = p.test(new URL(url).pathname);
        if (match) {
          return {
            email,
            surveyId: match.surveyId,
            choice: match.choice
          };
        }
      })
      .filter(Boolean),
    'email',
    'surveyId'
  );

  uniqueEvents.forEach(({ surveyId, email, choice }) => {
    Survey.updateOne(
      {
        _id: surveyId,
        recipients: {
          $elemMatch: { email: email, responded: false }
        }
      },
      {
        $inc: { [choice]: 1 },
        $set: { 'recipients.$.responded': true },
        lastResponded: new Date()
      }
    ).exec();
  });

  res.send({});
});

surveyRouter.post(
  '/api/surveys',
  requireLogin,
  requireCredits,
  async (req, res) => {
    const { subject, body, recipients } = req.body;

    const survey = new Survey({
      subject,
      body,
      recipients: recipients.split(',').map(email => ({ email })),
      _user: req.user.id, // id property generated by mongoose
      dateSent: Date.now()
    });

    sgMail.setApiKey(sendGridAPIKeys);
    const msg = {
      to: survey.recipients,
      from: 'test_from@example.com',
      subject: survey.subject,
      html: surveyTemplate(survey)
    };

    try {
      await sgMail.send(msg);
      await survey.save();
      req.user.credits -= 1;
      const user = await req.user.save();

      res.send(user);
    } catch (error) {
      res.status(422);
    }
  }
);

export default surveyRouter;
