const mongoose = require('mongoose');
const { Path } = require('path-parser');
const { URL } = require('url');

const requireLogin = require('../middlewares/requireLogin');
const requireCredits = require('../middlewares/requireCredits');
const keys = require('../config/keys').sendGridAPIKeys;

const sgMail = require('@sendgrid/mail');
const surveyTemplate = require('../services/emailTemplates/surveyTemplate');

const Survey = mongoose.model('Surveys');

module.exports = app => {
  app.get('/api/surveys', requireLogin, async (req, res) => {
    const surveys = await Survey.find({
      _user: req.user.id
    }).select({
      recipients: false
    });
    res.send(surveys);
  });

  app.get('/api/surveys/:surveyId/:choice', (req, res) => {
    res.send('Thanks for voting');
  });

  app.post('/api/surveys/webhooks', (req, res) => {
    const uniqBy = (arr, predicate) => {
      const cb =
        typeof predicate === 'function' ? predicate : o => o[predicate];
      return [
        ...arr
          .reduce((map, item) => {
            const key = cb(item);
            map.has(key) || map.set(key, item);
            return map;
          }, new Map())
          .values()
      ];
    };
    const p = new Path('/api/surveys/:surveyId/:choice');
    const uniqueEvents = uniqBy(
      req.body
        .map(({ email, url }) => {
          const match = p.test(new URL(url).pathname);
          if (match) {
            return {
              email,
              surveyId: match.surveyId,
              choice: match.choice
            };
          }
        })
        .filter(Boolean),
      'email',
      'surveyId'
    );

    uniqueEvents.forEach(({ surveyId, email, choice }) => {
      Survey.updateOne(
        {
          _id: surveyId,
          recipients: {
            $elemMatch: { email: email, responded: false }
          }
        },
        {
          $inc: { [choice]: 1 },
          $set: { 'recipients.$.responded': true },
          lastResponded: new Date()
        }
      ).exec();
    });

    res.send({});
  });

  app.post('/api/surveys', requireLogin, requireCredits, async (req, res) => {
    const { subject, body, recipients } = req.body;

    const survey = new Survey({
      subject,
      body,
      recipients: recipients.split(',').map(email => ({ email })),
      _user: req.user.id, // id property generated by mongoose
      dateSent: Date.now()
    });

    sgMail.setApiKey(keys);
    const msg = {
      to: survey.recipients,
      from: 'test_from@example.com',
      subject: survey.subject,
      html: surveyTemplate(survey)
    };

    try {
      await sgMail.send(msg);
      await survey.save();
      req.user.credits -= 1;
      const user = await req.user.save();

      res.send(user);
    } catch (error) {
      res.status(422);
    }
  });
};
