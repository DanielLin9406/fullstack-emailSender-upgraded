import { combineResolvers } from 'graphql-resolvers';
import sgMail from '@sendgrid/mail';
import { isAuthenticated } from '../../libs/auth/authResolver';
import { isEnoughCredit } from '../../libs/credit/creditResolver';
import { sendGridAPIKeys } from '../../config/keys';
import surveyTemplate from '../../libs/email/surveyTemplate';
import Survey from './surveyModel';

export default {
  Query: {
    surveys: combineResolvers(
      isAuthenticated,
      async (parent, arg, { user }) => {
        const surveys = await Survey.find({
          _user: user._id
        }).select({
          recipients: false
        });
        return surveys;
      }
    )
  },
  Mutation: {
    createSurveys: combineResolvers(
      isAuthenticated,
      isEnoughCredit,
      async (parent, { surveyBody }, { user }) => {
        const { subject, body, recipients } = surveyBody;

        const survey = new Survey({
          subject,
          body,
          recipients: recipients.split(',').map(email => ({ email })),
          _user: user.id, // id property generated by mongoose
          dateSent: Date.now()
        });

        sgMail.setApiKey(sendGridAPIKeys);
        const msg = {
          to: survey.recipients,
          from: 'test_from@example.com',
          subject: survey.subject,
          html: surveyTemplate(survey)
        };

        try {
          await sgMail.send(msg);
          await survey.save();
          user.credits -= 1;
          const user = await user.save();

          return user;
        } catch (error) {
          res.status(422);
        }
      }
    )
  }
};
